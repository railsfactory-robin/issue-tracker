// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Issue {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String       @db.Text
  status      Status       @default(SELECTED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Project     Project?     @relation(fields: [projectId], references: [id])
  projectId   Int?
  assignee    User?        @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User?        @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String?
  Comment     Comment[]
  Attachment  Attachment[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([reporterId])
}

enum Status {
  SELECTED
  OPEN
  IN_PROGRESS
  TESTING
  CLOSED
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  issues      Issue[]
  users       User[]   @relation("ProjectUsers")
  User        User?    @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String?

  @@index([createdById])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  projects              Project[]              @relation("ProjectUsers")
  TwoFactorConfirmation TwoFactorConfirmation?
  assignedIssues        Issue[]                @relation("Assignee")
  reportedIssues        Issue[]                @relation("Reporter")
  Project               Project[]              @relation("CreatedBy")
  projectId             Int?
  Comment               Comment[]              @relation("CommentedBy")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Comment {
  id            Int          @id @default(autoincrement())
  comments      String       @db.Text
  Issue         Issue?       @relation(fields: [issueId], references: [id])
  issueId       Int?
  User          User?        @relation("CommentedBy", fields: [commentedById], references: [id])
  commentedById String?
  Attachment    Attachment[]

  @@index([issueId])
  @@index([commentedById])
}

model Attachment {
  id          Int      @id @default(autoincrement())
  filename    String
  contentType String
  url         String   @unique
  issue       Issue?   @relation(fields: [issueId], references: [id])
  issueId     Int?
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   Int?

  @@index([issueId])
  @@index([commentId])
}
